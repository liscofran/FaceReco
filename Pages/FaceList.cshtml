@page
@model FaceRecognition.Pages.FaceListModel
@{
    ViewData["Title"] = "People List";
}

<h1>People List</h1>

<form method="post">
<div asp-validation-summary="ModelOnly" class="text-danger"></div>
<div class="form-group">
    <label asp-for="NewFace.Id" class="control-label"></label>
    <input asp-for="NewFace.Id" class="form-control" />
    <span asp-validation-for="NewFace.Id" class="text-danger"></span>
</div>
<div class="form-group">
    <label asp-for="NewFace.LastName" class="control-label"></label>
    <input asp-for="NewFace.LastName" class="form-control">
    <span asp-validation-for="NewFace.LastName" class="text-danger"></span>
</div>
<div class="form-group">
    <label asp-for="NewFace.FirstName" class="control-label"></label>
    <input asp-for="NewFace.FirstName" class="form-control" />
    <span asp-validation-for="NewFace.FirstName" class="text-danger"></span>
</div>
<!-- Campo nascosto per contenere il flusso di byte della foto catturata -->
<div>
    <input type="hidden" id="photoInput" name="NewFace.Photo" />
</div>
<div class ="form-group">
    <<h1>Cattura Foto dalla Webcam</h1>
        <div id="errorDiv" style="display: none; color: red;">Errore: Webcam non disponibile.</div>
    <video id="videoElement" width="640" height="480" autoplay></video>
    <br>
     <button id="captureButton">Scatta Foto</button>
    <br>
    <img id="photoElement" src="#" alt="Foto catturata" style="display: none;">
    <script>
        const photoInput = document.getElementById('photoInput');
        const video = document.getElementById('videoElement');
        const captureButton = document.getElementById('captureButton');
        const photoElement = document.getElementById('photoElement');
        const errorDiv = document.getElementById('errorDiv');

        // Funzione per avviare lo streaming dalla webcam
        async function startVideo() {
            try {
                const stream = await navigator.mediaDevices.getUserMedia({ video: true });
                video.srcObject = stream;
                errorDiv.style.display = 'none'; // Nascondi il messaggio di errore se la webcam è disponibile
            } catch (error) {
                console.error('Errore durante l\'avvio dello streaming dalla webcam: ', error);
                errorDiv.style.display = 'block'; // Mostra il messaggio di errore se la webcam non è disponibile
            }
        }

        // Funzione per catturare la foto dalla webcam e visualizzarla
        function capturePhoto() 
        {
            // Ottieni il flusso di byte dell'immagine dal canvas
            canvas.toBlob(function(blob) 
            {
                // Crea un oggetto FileReader per leggere i dati del blob
                const reader = new FileReader();

                // Definisci cosa fare una volta che i dati sono stati letti
                reader.onloadend = function() {
                    // I dati dell'immagine sono ora disponibili come flusso di byte in una variabile
                    const photoByteArray = new Uint8Array(reader.result);
                    
                    // Aggiorna il campo nascosto con i dati della foto in byte
                    photoInput.value = photoByteArray;
                    
                    // Mostra l'elemento img con la foto catturata
                    photoElement.src = URL.createObjectURL(blob);
                    photoElement.style.display = 'block';
                };

                // Leggi i dati del blob come flusso di byte
                reader.readAsArrayBuffer(blob);
            }, 'image/jpeg'); // Specifica il formato dell'immagine (puoi cambiare 'image/jpeg' se necessario)
        }

        // Aggiungi un gestore per il click del pulsante "Scatta Foto"
        captureButton.addEventListener('click', capturePhoto);

        // Avvia lo streaming dalla webcam quando il documento è pronto
        document.addEventListener('DOMContentLoaded', () => {startVideo();});

    </script>
</div>
<div class="form-group">
    <input type="submit" value="Create" class="btn btn-primary" />
</div>
</form>

<table class="table mt-5">
    <thead>
        <tr>
            <th scope="col">Cognome</th>
            <th scope="col">Nome</th>
            <th scope="col">Id</th>
            <th scope="col">Elimina</th>
        </tr>
    </thead>
    <tbody>
    @foreach (var face in Model.FaceList)
    {
        <tr>
            <td>@face.LastName</td>
            <td>@face.FirstName</td>
            <td>@face.Id</td>
            <td>
                <form method="post" asp-page-handler="Delete" asp-route-id="@face.Id">
                    <button class="btn btn-danger">Elimina</button>
                </form>
            </td>
        </tr>
    }
    </tbody>
</table>

@section Scripts {
<partial name="_ValidationScriptsPartial" />
}
